// welcome
//
// see ./gradle/scripts/dependencies.gradle for dependency management
//
//
//
//
//
//
//
//
//
//
//
//
//


plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "dev.architectury.loom" version "1.7-SNAPSHOT"
    id "maven-publish"
    id "idea"
}

apply from: 'gradle/scripts/helpers.gradle'

base {
    archivesName = "${archives_base_name}-${minecraft_version}"
}

version = project.mod_version
group = project.maven_group

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
            "examplemod.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // choose what mappings you want to use here
    // leave this uncommented if you want to use
    // mojang's official mappings, or feel free
    // to add your own mappings here (how about
    // mojmap layered with parchment, for example?)
    def mappingType = "${mapping_type}"
    if (mappingType == "official") {
        mappings loom.officialMojangMappings()
    } else if (mappingType == 'parchment') {
        mappings(loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchment_version}")
        })
    } else if (mappingType == 'yarn') {
        mappings("net.fabricmc:yarn:${yarn_version}:v2")
    } else {
        throw new IllegalArgumentException("mapping type '${mappingType}' not one of: official, parchment, yarn")
    }

    forge "net.minecraftforge:forge:${minecraft_version}-${project.forge_version}"

    if (propertyBool('use_lombok')) {
        compileOnly("org.projectlombok:lombok:${lombok_version}")
        annotationProcessor("org.projectlombok:lombok:${lombok_version}")
        testCompileOnly("org.projectlombok:lombok:${lombok_version}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombok_version}")
    }
}

processResources {
    // define properties that can be used during resource processing
    inputs.property("version", project.version)

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand(
            "version": project.version,
            "forge_version": forge_version,
            "loader_version_range": loader_version_range,
            "license": license,
            "mod_id": mod_id,
            "mod_display_name": mod_display_name,
            "mod_author": mod_author,
            "minecraft_version": minecraft_version
        )
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"

    // very few developers will provide source jar when publishing mods, we add param names in production jar
    // to make life easier for those whose mod depend on this mod
    options.compilerArgs << '-parameters'

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    options.release = 8
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    archiveClassifier.set("dev-shadow")

    //here you can relocate packages
//    relocate("io.github.classgraph", "zzzank.probejs.shaded.classgraph")

    configurations = [project.configurations.shade]
}

remapJar {
    setInput(shadowJar.archiveFile)
    dependsOn shadowJar
}

assemble.dependsOn shadowJar

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
